name: Build CloudStack OS Templates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      os_filter:
        description: 'OS to build (ubuntu, almalinux, rockylinux, centos, fedora, or all)'
        required: false
        default: 'all'
      skip_validation:
        description: 'Skip template validation'
        required: false
        default: 'false'

env:
  PACKER_VERSION: '1.10.0'
  QEMU_VERSION: '8.2.0'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set build matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event.inputs.os_filter }}" == "all" || "${{ github.event.inputs.os_filter }}" == "" ]]; then
            echo 'matrix=["ubuntu", "almalinux", "rockylinux", "centos", "fedora"]' >> $GITHUB_OUTPUT
          else
            echo 'matrix=["${{ github.event.inputs.os_filter }}"]' >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ${{ fromJson(needs.prepare.outputs.matrix) }}
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.1.x
      
      - name: Handle Deno lockfile
        run: |
          # Remove incompatible lockfile and let Deno recreate it
          if [ -f "deno.lock" ]; then
            echo "Removing existing lockfile to avoid version conflicts"
            rm deno.lock
          fi
          # Cache dependencies
          deno cache --reload scripts/build.ts
      
      - name: Cache Packer
        uses: actions/cache@v4
        with:
          path: ~/.packer.d
          key: packer-${{ env.PACKER_VERSION }}-${{ runner.os }}
      
      - name: Install Packer
        run: |
          wget -O packer.zip https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip
          unzip packer.zip
          sudo mv packer /usr/local/bin/
          packer version
          
      - name: Install Packer plugins
        run: |
          packer plugins install github.com/hashicorp/qemu
      
      - name: Install QEMU/KVM and Xvfb
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-kvm qemu-utils libvirt-daemon-system libvirt-clients bridge-utils virt-manager xvfb
          sudo modprobe kvm_intel || sudo modprobe kvm_amd || true
          sudo chown root:kvm /dev/kvm
          sudo chmod 666 /dev/kvm
          qemu-system-x86_64 --version
      
      - name: Setup KVM permissions
        run: |
          sudo usermod -a -G kvm $USER
          sudo usermod -a -G libvirt $USER
          # Check KVM availability
          if [[ -c /dev/kvm ]]; then
            echo "KVM is available"
            ls -la /dev/kvm
          else
            echo "KVM is not available, builds may be slower"
          fi
      
      - name: Cache ISO downloads
        uses: actions/cache@v4
        with:
          path: templates/*/output/*.iso
          key: iso-cache-${{ matrix.os }}-${{ hashFiles('configs/os-sources.md') }}
          restore-keys: |
            iso-cache-${{ matrix.os }}-
      
      - name: Create output directories
        run: |
          mkdir -p templates/${{ matrix.os }}/output
          mkdir -p artifacts
      
      - name: Build template
        run: |
          deno task build:${{ matrix.os }}
        env:
          PACKER_OUTPUT_DIR: templates/${{ matrix.os }}/output
          PACKER_FORMAT: qcow2
          SKIP_VALIDATION: ${{ github.event.inputs.skip_validation == 'true' }}
      
      - name: Validate template
        if: github.event.inputs.skip_validation != 'true'
        run: |
          deno task validate ${{ matrix.os }}
      
      - name: Compress template
        run: |
          cd templates/${{ matrix.os }}/output
          if ls *.qcow2 1> /dev/null 2>&1; then
            for file in *.qcow2; do
              echo "Compressing $file..."
              gzip -c "$file" > "../../../artifacts/${{ matrix.os }}-$(date +%Y%m%d).qcow2.gz"
            done
          fi
      
      - name: Upload template artifacts
        uses: actions/upload-artifact@v4
        with:
          name: template-${{ matrix.os }}
          path: artifacts/
          retention-days: 30
      
      - name: Generate template metadata
        run: |
          cd templates/${{ matrix.os }}/output
          if ls *.qcow2 1> /dev/null 2>&1; then
            for file in *.qcow2; do
              echo "Generating metadata for $file..."
              cat > "../../../artifacts/${{ matrix.os }}-metadata.json" << EOF
          {
            "name": "${{ matrix.os }}",
            "version": "$(date +%Y%m%d)",
            "format": "qcow2",
            "filename": "${{ matrix.os }}-$(date +%Y%m%d).qcow2.gz",
            "size": $(stat -c%s "$file"),
            "sha256": "$(sha256sum "$file" | cut -d' ' -f1)",
            "built_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "packer_version": "${PACKER_VERSION}",
            "qemu_version": "${QEMU_VERSION}"
          }
          EOF
            done
          fi
      
      - name: Upload metadata
        uses: actions/upload-artifact@v4
        with:
          name: metadata-${{ matrix.os }}
          path: artifacts/*-metadata.json
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v$(date +%Y%m%d-%H%M%S)
          name: CloudStack Templates $(date +%Y-%m-%d)
          body: |
            Automated build of CloudStack OS templates
            
            Built on: $(date -u +%Y-%m-%dT%H:%M:%SZ)
            Commit: ${{ github.sha }}
            
            Available templates:
            - Ubuntu
            - AlmaLinux
            - RockyLinux
            - CentOS
            - Fedora
          files: artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run security scan
        uses: github/super-linter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BRANCH: main
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          VALIDATE_SHELL: true